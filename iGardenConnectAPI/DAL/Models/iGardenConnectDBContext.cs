// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DAL.Models
{
    public partial class iGardenConnectDBContext : DbContext
    {
        public iGardenConnectDBContext()
        {
        }

        public iGardenConnectDBContext(DbContextOptions<iGardenConnectDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Garden> Gardens { get; set; }
        public virtual DbSet<GardenSensor> GardenSensors { get; set; }
        public virtual DbSet<Plant> Plants { get; set; }
        public virtual DbSet<Sensor> Sensors { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Garden>(entity =>
            {
                entity.HasKey(e => e.IdGarden);

                entity.ToTable("Garden");

                entity.Property(e => e.IdGarden)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("idGarden");

                entity.Property(e => e.IdPlant).HasColumnName("idPlant");

                entity.Property(e => e.IdUser).HasColumnName("idUser");

                entity.Property(e => e.LastWatered)
                    .HasColumnType("datetime")
                    .HasColumnName("last_watered");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Watered).HasColumnName("watered");

                entity.HasOne(d => d.IdPlantNavigation)
                    .WithMany(p => p.Gardens)
                    .HasForeignKey(d => d.IdPlant)
                    .HasConstraintName("FK__Garden__idPlant__2C3393D0");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.Gardens)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("FK__Garden__idUser__2D27B809");
            });

            modelBuilder.Entity<GardenSensor>(entity =>
            {
                entity.HasKey(e => new { e.IdGarden, e.IdSensor });

                entity.ToTable("GardenSensor");

                entity.Property(e => e.IdGarden)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("idGarden");

                entity.Property(e => e.IdSensor).HasColumnName("idSensor");

                entity.Property(e => e.State)
                    .HasMaxLength(100)
                    .HasColumnName("state")
                    .IsFixedLength();

                entity.Property(e => e.Value)
                    .HasMaxLength(100)
                    .HasColumnName("value")
                    .IsFixedLength();

                entity.HasOne(d => d.IdGardenNavigation)
                    .WithMany(p => p.GardenSensors)
                    .HasForeignKey(d => d.IdGarden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_idGarden");

                entity.HasOne(d => d.IdSensorNavigation)
                    .WithMany(p => p.GardenSensors)
                    .HasForeignKey(d => d.IdSensor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_idSensor_Sensor");
            });

            modelBuilder.Entity<Plant>(entity =>
            {
                entity.HasKey(e => e.IdPlant);

                entity.ToTable("Plant");

                entity.Property(e => e.IdPlant).HasColumnName("idPlant");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasColumnName("name")
                    .IsFixedLength();

                entity.Property(e => e.Species)
                    .HasMaxLength(100)
                    .HasColumnName("species")
                    .IsFixedLength();

                entity.Property(e => e.WateringInterval)
                    .HasColumnType("datetime")
                    .HasColumnName("watering_interval");
            });

            modelBuilder.Entity<Sensor>(entity =>
            {
                entity.HasKey(e => e.IdSensor)
                    .HasName("PK_sensor");

                entity.ToTable("Sensor");

                entity.Property(e => e.IdSensor).HasColumnName("idSensor");

                entity.Property(e => e.Brand)
                    .HasMaxLength(100)
                    .HasColumnName("brand")
                    .IsFixedLength();

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasColumnName("name")
                    .IsFixedLength();

                entity.Property(e => e.Price)
                    .HasMaxLength(100)
                    .HasColumnName("price")
                    .IsFixedLength();

                entity.Property(e => e.Type)
                    .HasMaxLength(100)
                    .HasColumnName("type")
                    .IsFixedLength();
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.IdUser)
                    .HasName("PK_Users");

                entity.ToTable("User");

                entity.Property(e => e.IdUser).HasColumnName("idUser");

                entity.Property(e => e.Login)
                    .HasMaxLength(100)
                    .HasColumnName("login")
                    .IsFixedLength();

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasColumnName("name")
                    .IsFixedLength();

                entity.Property(e => e.Role)
                    .HasMaxLength(100)
                    .HasColumnName("role")
                    .IsFixedLength();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}